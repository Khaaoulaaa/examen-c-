@page "/books"
@inject HttpClient Http
@using BookApp.Models

<h3>Ma bibliothÃ¨que ðŸ“š</h3>

@if (books is null)
{
    <p><em>Chargement en cours...</em></p>
}
else if (books.Count == 0)
{
    <p>Aucun livre trouvÃ©.</p>
}
else
{
    <ul class="list-group">
        @foreach (var book in books)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>
                    <strong>@book.Title</strong> par @book.Author
                    @if (book.IsRead)
                    {
                        <span style="color: green;"> (lu)</span>
                    }
                </span>
                @if (!book.IsRead)
                {
                    <button class="btn btn-sm btn-primary" @onclick="() => MarkAsRead(book.Id)">Marquer comme lu</button>
                }
            </li>
        }
    </ul>
}

@code {
    private List<Book>? books;
    private Book newBook = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    // RÃ©cupÃ¨re la liste des livres via l'API GET /books
    private async Task LoadBooks()
    {
        books = await Http.GetFromJsonAsync<List<Book>>("books");
    }

    // Envoie le nouveau livre Ã  l'API via POST /books et recharge la liste
    private async Task AddBook()
    {
        var response = await Http.PostAsJsonAsync("books", newBook);
        if (response.IsSuccessStatusCode)
        {
            // RÃ©initialise le formulaire
            newBook = new Book();
            await LoadBooks();
        }
    }

    // Envoie une requÃªte PUT Ã  l'API pour marquer le livre comme lu via PUT /books/{id}
    private async Task MarkAsRead(int id)
    {
        var response = await Http.PutAsync($"books/{id}", null);
        if (response.IsSuccessStatusCode)
        {
            await LoadBooks();
        }
    }
}
